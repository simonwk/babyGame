import java.util.*;

public class Methods {

	String[][] gameBoard = new String[11][11];
	int[][] wallPos = new int[50][2];
	Random rand = new Random();
	Scanner scan = new Scanner(System.in);
	int xPosWall, yPosWall, move, xPosBaby, yPosBaby, y = 0, x = 0, i = 1;
	String response;
	
	public void createGameBoard() {
		for(int row = 0; row < 11; row++) {
			for(int col = 0; col < 11; col++) {
				if (row == 0) {
					gameBoard[row][col] = " " + Integer.toString(col) + " ";
				}
				else {
					gameBoard[row][col] = "[ ]";					
				}
				
				if (row == i) {
					gameBoard[row][col] = " " + Integer.toString(col + i) + " ";
					i++;
				}
			}
		}
	}
	
	public void updateGameBoard() {
		for(int row = 0; row < 10; row++) {
			for(int col = 0; col < 10; col++) {
				if (row == i) {
					gameBoard[row][col] = " " + Integer.toString(col + i) + " ";
					i++;
				}
				if (row == 0) {
					gameBoard[row][col] = " " + Integer.toString(col) + " ";
				}
				System.out.print(gameBoard[row][col]); 
			}
			System.out.println();
		}
	}
	
	public void setInitialPositionBaby() {
		gameBoard[yPosBaby = rand.nextInt(2) + 4][xPosBaby = rand.nextInt(2) + 4] = "[B]";
	}
	
	public void placeWall() {
		System.out.println("Wall: x,y");
		response = scan.nextLine();
		xPosWall = Character.getNumericValue(response.charAt(0));
		yPosWall = Character.getNumericValue(response.charAt(2));
		
		
		wallPos[y][x] = xPosWall;
		x++;
		wallPos[y][x] = yPosWall;
		y++;
		x = 0;
		
		gameBoard[yPosWall][xPosWall] = "[-]";
		
		updateGameBoard();
	}
	
	public void moveBaby() {
		move = rand.nextInt(8);
		switch(move) {
		case 0: {
			int col = 0;
			for (int row = 0; row < wallPos.length; row++) {
					if (yPosBaby-- == wallPos[row][col++] && xPosBaby == wallPos[row][col]) {
						move = rand.nextInt(8);
					}
			}
			gameBoard[yPosBaby][xPosBaby] = "[ ]";
			gameBoard[yPosBaby -= 1][xPosBaby] = "[B]";
			break;
		}
		case 1: {
			gameBoard[yPosBaby][xPosBaby] = "[ ]";
			gameBoard[yPosBaby -= 1][xPosBaby += 1] = "[B]";
			break;
		}
		case 2: {
			gameBoard[yPosBaby][xPosBaby] = "[ ]";
			gameBoard[yPosBaby][xPosBaby += 1] = "[B]";
			break;
		}
		case 3: {
			gameBoard[yPosBaby][xPosBaby] = "[ ]";
			gameBoard[yPosBaby += 1][xPosBaby += 1] = "[B]";
			break;
		}
		case 4: {
			gameBoard[yPosBaby][xPosBaby] = "[ ]";
			gameBoard[yPosBaby += 1][xPosBaby] = "[B]";
			break;
		}
		case 5: {
			gameBoard[yPosBaby][xPosBaby] = "[ ]";
			gameBoard[yPosBaby += 1][xPosBaby -= 1] = "[B]";
			break;
		}
		case 6: {
			gameBoard[yPosBaby][xPosBaby] = "[ ]";
			gameBoard[yPosBaby][xPosBaby -= 1] = "[B]";
			break;
		}
		case 7: {
			gameBoard[yPosBaby][xPosBaby] = "[ ]";
			gameBoard[yPosBaby -= 1][xPosBaby -= 1] = "[B]";
			break;
		}
		}
	}

	public boolean checkPosBaby() {
		for (int i = 1; i < 10; i++) {
			if ((yPosBaby == 1 && xPosBaby == i) || (yPosBaby == 9 && xPosBaby == i) || ((xPosBaby == 1 || xPosBaby == 9) && (yPosBaby == i))) {
				return false;
			}	
		}
		return true;
	}
	
	
}
	
